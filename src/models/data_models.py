from pydantic import BaseModel, Field
from typing import List, Dict
from datetime import datetime


class ApiInfo(BaseModel):
    """
    Represents a single API (function, class, endpoint) found in the code.
    """
    name: str = Field(description="The name of the API, e.g., 'getUserById'.")
    semantic_description: str = Field(description="A concise summary of the API's function, potentially generated by an LLM or extracted from docstrings.")
    source_file: str = Field(description="The file where the API is defined.")
    start_line: int = Field(description="The line number where the API definition starts.")
    end_line: int = Field(description="The line number where the API definition ends.")


class DirectoryAnalysis(BaseModel):
    """
    Represents the complete analysis results for a single directory.
    """
    directory_path: str
    file_types: Dict[str, int] = Field(description="A dictionary mapping file extensions to their count, e.g., {'.py': 5, '.md': 1}.")
    required_skillsets: List[str] = Field(description="A list of dynamically identified skillsets or technology tags, e.g., ['React', 'Django', 'API-Design'].")
    apis: List[ApiInfo] = Field(description="A list of all APIs found within the directory.")


class TocEntry(BaseModel):
    """
    Represents a single entry in the Table of Contents of the agents.md file.
    """
    section_name: str
    start_line: int
    end_line: int


class AgentsMdContent(BaseModel):
    """
    Represents the structured content of a single agents.md file before serialization.
    """
    toc_lines: int = Field(description="The number of lines the Table of Contents will occupy.")
    table_of_contents: List[TocEntry]
    metadata: Dict[str, str] = Field(description="Version metadata, e.g., {'last_generated_utc': '...', 'commit_hash': '...'}. The 'commit_hash' may be a placeholder if not available during generation (e.g., in a pre-commit hook).")
    file_types_summary: str
    required_skillsets_summary: str
    apis_summary: str